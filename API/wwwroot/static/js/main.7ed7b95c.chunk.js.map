{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOption.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileFormEdit.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivitiesCard.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","pagenumber","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","profile","updateFollowing","listFollowings","predicate","userActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","updateProfile","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","sepAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","marginLeft","secondary","clearing","floated","groupedActivities","group","sub","ActivityFilters","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribon","verticalAlign","relaxed","divided","ribbon","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","ServerError","message","Modal","onClose","setEditMode","isCurrentUser","editProfile","setEditProfile","Tab","Pane","objectFit","Meta","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"wZAOaA,EAIT,WAAYC,EAASC,GAAyB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA2C,IAA/BC,EAA8B,uDAAjB,EAAGC,EAAc,uDAAH,EAAG,yBAH1CC,gBAG0C,OAF1CD,cAE0C,EACtCH,KAAKI,WAAaF,EAClBF,KAAKG,SAAWA,GCRxBE,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAGhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAGXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAEtBpB,EAAamB,EAASF,QAAT,YAFS,uBAIxBE,EAASpB,KAAO,IAAID,EAAgBqB,EAASpB,KAAMsB,KAAKC,MAAMtB,IAJtC,kBAKjBmB,GALiB,gCAOrBA,GAPqB,2CAAhC,uDAQG,SAACI,GACA,MAAiCA,EAAMJ,SAA/BpB,EAAR,EAAQA,KAAMyB,EAAd,EAAcA,OAAQX,EAAtB,EAAsBA,OACtB,OAAQW,GACJ,KAAK,IAOD,GANoB,kBAATzB,GACP0B,IAAMF,MAAMxB,GAEM,QAAlBc,EAAOa,QAAoB3B,EAAK4B,OAAOC,eAAe,OACtDC,GAAQC,KAAK,aAEb/B,EAAK4B,OAAQ,CACb,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAOjC,EAAK4B,OACf5B,EAAK4B,OAAOK,IACZD,EAAiBD,KAAK/B,EAAK4B,OAAOK,IAG1C,MAAMD,EAAiBE,OAE3B,MACJ,KAAK,IACDR,IAAMF,MAAM,gBACZ,MACJ,KAAK,IACDM,GAAQC,KAAK,cACb,MACJ,KAAK,IACDf,EAAMC,YAAYkB,eAAenC,GACjC8B,GAAQC,KAAK,iBAGrB,OAAOK,QAAQC,OAAOb,MAG1B,IAAMc,EAAe,SAAIlB,GAAJ,OAAmCA,EAASpB,MAE3DuC,EACG,SAAIC,GAAJ,OAAoBjC,IAAMkC,IAAOD,GAAKE,KAAKJ,IAD9CC,EAEI,SAAIC,EAAaG,GAAjB,OAA8BpC,IAAMqC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFhEC,EAGG,SAAIC,EAAaG,GAAjB,OAA8BpC,IAAMsC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH9DC,EAIG,SAAIC,GAAJ,OAAoBjC,IAAMuC,OAAUN,GAAKE,KAAKJ,IA2CxCS,EAND,CACVC,WAnCe,CACfC,KAAM,SAACC,GAAD,OAA6B3C,IAAMkC,IAAiC,cAAe,CAAES,WAAUR,KAAKJ,IAC1Ga,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAA,cAAmCe,IAC7EC,OAAQ,SAACD,GAAD,OAAkCf,EAAA,sBAAkCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAkCa,KAC1DI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,sBAAmCa,EAAnC,WAAgD,MA8BxEK,QA3BY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAqBqB,KAyB7EE,SAtBa,CACbrB,IAAK,SAACsB,GAAD,OAAsBxB,EAAA,oBAAmCwB,KAC9DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB1D,IAAMqC,KAAY,SAAUsB,EAAU,CACzChD,QAAS,CAAE,eAAgB,0BAGnCmD,aAAc,SAACjB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAuC,KACrEkB,YAAa,SAAClB,GAAD,OAAgBb,EAAA,kBAAwBa,KACrDG,OAAQ,SAACgB,GAAD,OAA+BhC,EAAa,YAAagC,IACjEC,gBAAiB,SAACT,GAAD,OAAsBxB,EAAA,kBAAyBwB,GAAY,KAC5EU,eAAgB,SAACV,EAAkBW,GAAnB,OACZnC,EAAA,kBAAmCwB,EAAnC,sBAAyDW,KAC7DC,eAAgB,SAACZ,EAAkBW,GAAnB,OACZnC,EAAA,oBAA0CwB,EAA1C,iCAA2EW,OCxFtEE,EACT,WAAYC,GAA4B,oBACpCC,OAAOC,OAAO7E,KAAM2E,IAIfG,EAST,WAAY1B,GAAgC,yBAR5CF,QAAc6B,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAsB,GAKqB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGRjC,IACApD,KAAKkD,GAAKE,EAASF,GACnBlD,KAAKgF,MAAQ5B,EAAS4B,MACtBhF,KAAKiF,SAAW7B,EAAS6B,SACzBjF,KAAKkF,YAAc9B,EAAS8B,YAC5BlF,KAAKmF,KAAO/B,EAAS+B,KACrBnF,KAAKqF,MAAQjC,EAASiC,MACtBrF,KAAKoF,KAAOhC,EAASgC,OC5BpBE,EACT,WAAY5B,GAAa,oBACrB1D,KAAK6D,SAAWH,EAAKG,SACrB7D,KAAKuF,YAAc7B,EAAK6B,YACxBvF,KAAKwF,MAAQ9B,EAAK8B,OCTLC,E,WAUjB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,sBAAyCb,EAQ3B,KAPdc,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,gBAAiB,EAKH,KAJdhG,WAAgC,KAIlB,KAHdiG,aAAe,IAAI/F,EAGL,KAFduE,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAEnB,KAadC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAdV,KAiBdG,aAAe,SAAC3B,EAAmB4B,GAC/B,IAAMC,EAAiB,WACnB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAOrE,GACf,cAARA,GAAqB,EAAKyC,UAAU5B,OAAOb,OAGvD,OAAQyC,GACJ,IAAK,MACD6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAKzB,UAAU5B,OAAO,aACtB,EAAK4B,UAAUyB,IAAI,YAAaG,KAtC9B,KAwEdG,eAxEc,sBAwEG,4BAAApF,EAAA,6DACb,EAAKqF,mBAAkB,GADV,kBAGY3D,EAAMC,WAAWC,KAAK,EAAK0D,aAHvC,QAGHC,EAHG,QAIF5G,KAAKwG,SAAQ,SAAAlD,GAChB,EAAKuD,YAAYvD,MAErB,EAAKwD,cAAcF,EAAO3G,YAC1B,EAAKyG,mBAAkB,GARd,kDAUTK,QAAQC,IAAR,MACA,EAAKN,mBAAkB,GAXd,0DAxEH,KAuFdI,cAAgB,SAAC7G,GACb,EAAKA,WAAaA,GAxFR,KA2FdgH,aA3Fc,uCA2FC,WAAO7D,GAAP,eAAA/B,EAAA,2DACPiC,EAAW,EAAK4D,YAAY9D,IADrB,uBAGP,EAAK0C,iBAAmBxC,EAHjB,kBAIAA,GAJA,cAMP,EAAKoD,mBAAkB,GANhB,mBAQc3D,EAAMC,WAAWG,QAAQC,GARvC,eAQHE,EARG,OASH,EAAKuD,YAAYvD,GACjB6D,aAAY,WACR,EAAKrB,iBAAmBxC,KAE5B,EAAKoD,mBAAkB,GAbpB,kBAcIpD,GAdJ,kCAgBHyD,QAAQC,IAAR,MACA,EAAKN,mBAAkB,GAjBpB,0DA3FD,2DAiHNG,YAAc,SAACvD,GACnB,IACU,EADJM,EAAO5C,EAAMoG,UAAUxD,KACzBA,IACAN,EAAS+D,QAAU/D,EAASgE,UAAWC,MACnC,SAAAlG,GAAC,OAAIA,EAAE0C,WAAaH,EAAKG,YAE7BT,EAASkE,OAASlE,EAASmE,eAAiB7D,EAAKG,SACjDT,EAASoE,KAAT,UAAgBpE,EAASgE,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAC,GAAC,OAAIA,EAAE7D,WAAaT,EAASmE,iBAE1EnE,EAAS+B,KAAO,IAAIwC,KAAKvE,EAAS+B,MAClC,EAAKO,iBAAiBO,IAAI7C,EAASF,GAAIE,IA3H7B,KA8HN4D,YAAc,SAAC9D,GACnB,OAAO,EAAKwC,iBAAiBnD,IAAIW,IA/HvB,KAkIdsD,kBAAoB,SAACoB,GACjB,EAAK7B,eAAiB6B,GAnIZ,KAsIdC,eAtIc,uCAsIG,WAAOzE,GAAP,mBAAAjC,EAAA,6DACPuC,EAAO5C,EAAMoG,UAAUxD,KACvBoE,EAAW,IAAIxC,EAAQ5B,GAFhB,kBAIHb,EAAMC,WAAWK,OAAOC,GAJrB,QAKH2E,EAAc,IAAIrD,EAAStB,IACrBmE,aAAe7D,EAAMG,SACjCkE,EAAYX,UAAY,CAACU,GACzB,EAAKnB,YAAYoB,GACjBd,aAAY,WACR,EAAKrB,iBAAmBmC,KAVnB,kDAaTlB,QAAQC,IAAR,MAbS,0DAtIH,2DAuJdkB,eAvJc,uCAuJG,WAAO5E,GAAP,SAAAjC,EAAA,+EAEH0B,EAAMC,WAAWO,OAAOD,GAFrB,OAGT6D,aAAY,WACR,GAAI7D,EAASF,GAAI,CACb,IAAI+E,EAAe,2BAAQ,EAAKjB,YAAY5D,EAASF,KAAQE,GAC7D,EAAKsC,iBAAiBO,IAAI7C,EAASF,GAAI+E,GACvC,EAAKrC,iBAAmBqC,MAPvB,+CAWTpB,QAAQC,IAAR,MAXS,wDAvJH,2DAsKdoB,eAtKc,uCAsKG,WAAOhF,GAAP,SAAA/B,EAAA,6DACb,EAAK2E,SAAU,EADF,kBAGHjD,EAAMC,WAAWF,OAAOM,GAHrB,OAIT+D,aAAY,WACR,EAAKvB,iBAAiB9C,OAAOM,GAC7B,EAAK4C,SAAU,KANV,gDASTmB,aAAY,WACR,EAAKnB,SAAU,KAVV,yDAtKH,2DAqLdqC,iBArLc,sBAqLK,4BAAAhH,EAAA,6DACTuC,EAAO5C,EAAMoG,UAAUxD,KAC7B,EAAKoC,SAAU,EAFA,kBAILjD,EAAMC,WAAWQ,OAAO,EAAKsC,iBAAkB1C,IAJ1C,OAKX+D,aAAY,WAAO,IAAD,EACd,aAAI,EAAKrB,wBAAT,aAAI,EAAuBuB,QAAS,CAAC,IAAD,EAChC,EAAKvB,iBAAiBwB,UAAtB,UACI,EAAKxB,iBAAiBwB,iBAD1B,aACI,EAAiCgB,QAAO,SAAAjH,GAAC,OAAIA,EAAE0C,YAAF,OAAeH,QAAf,IAAeA,OAAf,EAAeA,EAAMG,aACtE,EAAK+B,iBAAiBuB,SAAU,MAC7B,CAAC,IAAD,IACGW,EAAW,IAAIxC,EAAQ5B,GAC7B,YAAKkC,wBAAL,mBAAuBwB,iBAAvB,SAAkCvF,KAAKiG,GACvC,EAAKlC,iBAAkBuB,SAAU,EAErC,EAAKzB,iBAAiBO,IAAI,EAAKL,iBAAkB1C,GAAI,EAAK0C,qBAfnD,gDAkBXiB,QAAQC,IAAR,MAlBW,yBAoBXG,aAAY,WACR,EAAKnB,SAAU,KArBR,4EArLL,KA+MduC,qBA/Mc,sBA+MS,sBAAAlH,EAAA,6DACnB,EAAK2E,SAAU,EADI,kBAGTjD,EAAMC,WAAWQ,OAAO,EAAKsC,iBAAkB1C,IAHtC,OAIf+D,aAAY,WAAO,IAAD,EACd,EAAKrB,iBAAkB0C,cAAc,UAAC,EAAK1C,wBAAN,aAAC,EAAuB0C,aAC7D,EAAK5C,iBAAiBO,IAAI,EAAKL,iBAAkB1C,GAAI,EAAK0C,qBAN/C,gDASfiB,QAAQC,IAAR,MATe,yBAWfG,aAAY,kBAAM,EAAKnB,SAAU,KAXlB,4EA/MT,KA8NdyC,sBAAwB,WACpB,EAAK3C,sBAAmBb,GA/Nd,KAkOdyD,wBAA0B,SAAC3E,GACvB,EAAK6B,iBAAiBY,SAAQ,SAAAlD,GAC1BA,EAASgE,UAAUd,SAAQ,SAAAwB,GACnBA,EAASjE,WAAaA,IACtBiE,EAASW,UAAYX,EAASY,iBAAmBZ,EAASY,iBAC1DZ,EAASW,WAAaX,EAASW,kBAtO3CE,YAAmB3I,MAEnB4I,aACI,kBAAM,EAAKpE,UAAUqE,UACrB,WACI,EAAK7C,aAAe,IAAI/F,EACxB,EAAKyF,iBAAiBoD,QACtB,EAAKvC,oB,6CAmCjB,WACI,IAAMvD,EAAS,IAAI+F,gBAUnB,OATA/F,EAAOkB,OAAO,aAAclE,KAAKgG,aAAa5F,WAAW4I,YACzDhG,EAAOkB,OAAO,WAAYlE,KAAKgG,aAAa7F,SAAS6I,YACrDhJ,KAAKwE,UAAU8B,SAAQ,SAACF,EAAOrE,GACf,cAARA,EACAiB,EAAOkB,OAAOnC,EAAMqE,EAAe6C,eAEnCjG,EAAOkB,OAAOnC,EAAKqE,MAGpBpD,I,4BAGX,WACI,OAAOkG,MAAMC,KAAKnJ,KAAK0F,iBAAiB0D,UAAUC,MAAK,SAAClI,EAAGmI,GAAJ,OACnDnI,EAAEgE,KAAMoE,UAAYD,EAAEnE,KAAMoE,e,6BAGpC,WACI,OAAO3E,OAAO4E,QACVxJ,KAAKyJ,iBAAiBC,QAAO,SAACC,EAAYvG,GACtC,IAAM+B,EAAOyE,kBAAOxG,EAAS+B,KAAO,eAEpC,OADAwE,EAAWxE,GAAQwE,EAAWxE,GAAX,sBAAuBwE,EAAWxE,IAAlC,CAAyC/B,IAAY,CAACA,GAClEuG,IACR,S,cCjFME,E,WAWjB,aAAe,IAAD,gCAVdxF,QAA0B,KAUZ,KATdyF,gBAAiB,EASH,KARdC,WAAY,EAQE,KAPdjE,SAAU,EAOI,KANdkE,WAAwB,GAMV,KALdC,mBAAoB,EAKN,KAJdC,UAAY,EAIE,KAHdC,mBAAoB,EAGN,KAFd1F,eAAiC,GAEnB,KAgBd2F,aAAe,SAACF,GACZ,EAAKA,UAAYA,GAjBP,KA4BdG,YA5Bc,uCA4BA,WAAOxG,GAAP,eAAA1C,EAAA,6DACV,EAAK2I,gBAAiB,EADZ,kBAGgBjH,EAAMe,SAASrB,IAAIsB,GAHnC,OAGAQ,EAHA,OAIN4C,aAAY,WACR,EAAK5C,QAAUA,EACf,EAAKyF,gBAAiB,KANpB,gDASNjD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK6C,gBAAiB,KAVlC,yDA5BA,2DA0CdhG,YA1Cc,uCA0CA,WAAOC,GAAP,iBAAA5C,EAAA,6DACV,EAAK4I,WAAY,EADP,kBAGiBlH,EAAMe,SAASE,YAAYC,GAH5C,OAGA7C,EAHA,OAIAoJ,EAAQpJ,EAASpB,KACvBmH,aAAY,WACW,IAAD,EAAd,EAAK5C,UACL,YAAKA,QAAQkG,cAAb,SAAqB1I,KAAKyI,GACtBA,EAAME,QAAU1J,EAAMoG,UAAUxD,OAChC5C,EAAMoG,UAAUuD,SAASH,EAAMhI,KAC/B,EAAK+B,QAAQmB,MAAQ8E,EAAMhI,MAGnC,EAAKyH,WAAY,KAbf,gDAgBNlD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK8C,WAAY,KAjB7B,yDA1CA,2DA+Dd5F,aA/Dc,uCA+DC,WAAOmG,GAAP,SAAAnJ,EAAA,6DACX,EAAK2E,SAAU,EADJ,kBAGDjD,EAAMe,SAASO,aAAamG,EAAMpH,IAHjC,OAIPpC,EAAMoG,UAAUuD,SAASH,EAAMhI,KAC/B2E,aAAY,WACJ,EAAK5C,SAAW,EAAKA,QAAQkG,SAC7B,EAAKlG,QAAQkG,OAAO9C,MAAK,SAAAiD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAClD,EAAKnG,QAAQkG,OAAO9C,MAAK,SAAAiD,GAAC,OAAIA,EAAExH,KAAOoH,EAAMpH,MAAKsH,QAAS,EAC3D,EAAKnG,QAAQmB,MAAQ8E,EAAMhI,IAC3B,EAAKwD,SAAU,MAVhB,gDAcPe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAf1B,yDA/DD,2DAkFd1B,YAlFc,uCAkFA,WAAOkG,GAAP,SAAAnJ,EAAA,6DACV,EAAK2E,SAAU,EADL,kBAGAjD,EAAMe,SAASQ,YAAYkG,EAAMpH,IAHjC,OAIN+D,aAAY,WACW,IAAD,EAAd,EAAK5C,UACL,EAAKA,QAAQkG,OAAb,UAAsB,EAAKlG,QAAQkG,cAAnC,aAAsB,EAAqBnC,QAAO,SAAAsC,GAAC,OAAIA,EAAExH,KAAOoH,EAAMpH,MACtE,EAAK4C,SAAU,MAPjB,gDAWNe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAZ3B,yDAlFA,2DAkGd6E,cAlGc,uCAkGE,WAAOtG,GAAP,SAAAlD,EAAA,+EAEF0B,EAAMe,SAASP,OAAOgB,GAFpB,OAGR4C,aAAY,WAAO,IAAD,EACV5C,EAAQkB,aAAelB,EAAQkB,eAAR,UAAwBzE,EAAMoG,UAAUxD,YAAxC,aAAwB,EAAsB6B,cACrEzE,EAAMoG,UAAU0D,eAAevG,EAAQkB,aAC3C,EAAKlB,QAAL,2BAAoB,EAAKA,SAAYA,MANjC,+CASRwC,QAAQC,IAAR,MATQ,wDAlGF,2DA+GdxC,gBA/Gc,uCA+GI,WAAOT,EAAkB4E,GAAzB,SAAAtH,EAAA,6DACd,EAAK2E,SAAU,EADD,kBAGJjD,EAAMe,SAASU,gBAAgBT,GAH3B,OAIV/C,EAAM+J,cAAcrC,wBAAwB3E,GAC5CoD,aAAY,WAAO,IAAD,IACV,EAAK5C,SAAW,EAAKA,QAAQR,YAAb,UAA0B/C,EAAMoG,UAAUxD,YAA1C,aAA0B,EAAsBG,WAAY,EAAKQ,QAAQR,WAAaA,IACtG4E,EAAY,EAAKpE,QAAQqE,iBAAmB,EAAKrE,QAAQqE,iBACzD,EAAKrE,QAAQoE,WAAa,EAAKpE,QAAQoE,WAEvC,EAAKpE,SAAW,EAAKA,QAAQR,YAAb,UAA0B/C,EAAMoG,UAAUxD,YAA1C,aAA0B,EAAsBG,YAChE4E,EAAY,EAAKpE,QAAQyG,iBAAmB,EAAKzG,QAAQyG,kBAE7D,EAAKd,WAAW1D,SAAQ,SAAAjC,GAChBA,EAAQR,WAAaA,IACrBQ,EAAQoE,UAAYpE,EAAQqE,iBAAmBrE,EAAQqE,iBACvDrE,EAAQoE,WAAapE,EAAQoE,cAGrC,EAAK3C,SAAU,KAnBT,gDAsBVe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAvBvB,yDA/GJ,6DA0IdiF,eA1Ic,uCA0IG,WAAOvG,GAAP,eAAArD,EAAA,6DACb,EAAK8I,mBAAoB,EADZ,kBAGgBpH,EAAMe,SAASW,eAAe,EAAKF,QAASR,SAAUW,GAHtE,OAGHwF,EAHG,OAIT/C,aAAY,WACR,EAAK+C,WAAaA,EAClB,EAAKC,mBAAoB,KANpB,gDASTpD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKgD,mBAAoB,KAVlC,yDA1IH,2DAwJde,mBAxJc,uCAwJO,WAAOxG,GAAP,eAAArD,EAAA,6DACjB,EAAKgJ,mBAAoB,EADR,kBAGYtH,EAAMe,SAASa,eAAe,EAAKJ,QAASR,SAAUW,GAHlE,OAGPmF,EAHO,OAIb1C,aAAY,WACR,EAAKxC,eAAiBkF,EACtB,EAAKQ,mBAAoB,KANhB,gDASbtD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKkD,mBAAoB,KAV9B,yDAxJP,sDACVxB,YAAmB3I,MAEnB4I,aACI,kBAAM,EAAKsB,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAM1F,EAA0B,IAAd0F,EAAkB,YAAc,YAClD,EAAKa,eAAevG,QAEpB,EAAKwF,WAAa,M,+CAUlC,WACI,SAAIlJ,EAAMoG,UAAUxD,OAAQ1D,KAAKqE,UACtBvD,EAAMoG,UAAUxD,KAAKG,WAAa7D,KAAKqE,QAAQR,a,KChC7CoH,E,WAGjB,aAAe,IAAD,gCAFdvH,KAAoB,KAEN,KAQdD,MARc,uCAQN,WAAOyH,GAAP,eAAA/J,EAAA,+EAEmB0B,EAAMU,QAAQE,MAAMyH,GAFvC,OAEMxH,EAFN,OAGA5C,EAAMC,YAAYoK,SAASzH,EAAK7C,OAChCoG,aAAY,kBAAM,EAAKvD,KAAOA,KAC9B9B,GAAQC,KAAK,eACbf,EAAMsK,WAAWC,aANjB,uHARM,2DAoBdC,OAAS,WACLxK,EAAMC,YAAYoK,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAK/H,KAAO,KACZ9B,GAAQC,KAAK,MAxBH,KA2Bd6J,QA3Bc,sBA2BJ,4BAAAvK,EAAA,+EAEiB0B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGFuD,aAAY,kBAAM,EAAKvD,KAAOA,KAH5B,gDAKFmD,QAAQC,IAAR,MALE,yDA3BI,KAoCdnD,SApCc,uCAoCH,WAAOuH,GAAP,eAAA/J,EAAA,+EAEgB0B,EAAMU,QAAQI,SAASuH,GAFvC,OAEGxH,EAFH,OAGH5C,EAAMC,YAAYoK,SAASzH,EAAK7C,OAChCoG,aAAY,kBAAM,EAAKvD,KAAOA,KAC9B9B,GAAQC,KAAK,eACbf,EAAMsK,WAAWC,aANd,uHApCG,2DAgDdZ,SAAW,SAACjF,GACJ,EAAK9B,OACL,EAAKA,KAAK8B,MAAQA,IAlDZ,KAqDdoF,eAAiB,SAACe,GACV,EAAKjI,OACL,EAAKA,KAAK6B,YAAcoG,IAtD5BhD,YAAmB3I,M,4CAGvB,WACI,QAASA,KAAK0D,S,KCGT5C,EAAe,CACxB+J,cAAe,IAAIpF,EACnB1E,YAAa,ICXb,aAAe,IAAD,gCAJdO,MAA4B,KAId,KAHdT,MAAuB0K,OAAOC,aAAaI,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAed5J,eAAiB,SAACX,GACd,EAAKA,MAAQA,GAhBH,KAmBd6J,SAAW,SAACtK,GACR,EAAKA,MAAQA,GApBH,KAuBdiL,aAAe,WACX,EAAKD,WAAY,GAvBjBlD,YAAmB3I,MAEnB4I,aACI,kBAAM,EAAK/H,SACX,SAAAA,GACQA,EACA0K,OAAOC,aAAaO,QAAQ,MAAOlL,GAEnC0K,OAAOC,aAAaC,WAAW,WDG/CvE,UAAW,IAAI+D,EACfG,WAAY,IERZ,aAAe,IAAD,gCALdY,MAAe,CACXC,MAAM,EACNxJ,KAAM,MAGI,KAIdyJ,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMvJ,KAAO0J,GANR,KASdd,WAAa,WACT,EAAKW,MAAMC,MAAO,EAClB,EAAKD,MAAMvJ,KAAO,MAVlBkG,YAAmB3I,OFQvBoM,aAAc,IAAIvC,EAClBwC,aAAc,IGdd,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACf3L,EAAM+J,cAAcjF,mBACpB,EAAK2G,eAAgB,IAAIG,KACpBC,QAAQnM,oBAAkDiM,EAAY,CACnEG,mBAAoB,kCAAM9L,EAAMoG,UAAUxD,YAAtB,aAAM,EAAsB7C,SAEnDgM,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cAAcW,QAAQC,OAAM,SAAA7L,GAAK,OAAIuF,QAAQC,IAAI,sCAAuCxF,MAE7F,EAAKiL,cAAca,GAAG,gBAAgB,SAACd,GACnCrF,aAAY,WACRqF,EAAShG,SAAQ,SAAA+G,GACbA,EAAQC,UAAY,IAAI3F,KAAK0F,EAAQC,UAAY,QAErD,EAAKhB,SAAWA,QAIxB,EAAKC,cAAca,GAAG,kBAAkB,SAACC,GACrCpG,aAAY,WACRoG,EAAQC,UAAY,IAAI3F,KAAK0F,EAAQC,WACrC,EAAKhB,SAASiB,QAAQF,WA5BxB,KAkCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKjB,qBAAL,SAAoBkB,OAAON,OAAM,SAAA7L,GAAK,OAAIuF,QAAQC,IAAI,8BAA+BxF,OAnC3E,KAsCdoM,cAAgB,WACZ,EAAKpB,SAAW,GAChB,EAAKkB,qBAxCK,KA2CdG,WA3Cc,uCA2CD,WAAOvE,GAAP,iBAAAjI,EAAA,6DACTiI,EAAOqD,WAAP,UAAoB3L,EAAM+J,cAAcjF,wBAAxC,aAAoB,EAAsC1C,GADjD,4BAGC,EAAKqJ,qBAHN,aAGC,EAAoBqB,OAAO,cAAexE,GAH3C,sDAKLvC,QAAQC,IAAR,MALK,wDA3CC,sDACV6B,YAAmB3I,QHgBd6N,EAAeC,wBAAchN,GAEnC,SAASiN,IACZ,OAAOC,qBAAWH,G,WIvBPI,eAAS,WACpB,MAAwCF,IAAhC7G,UAAaxD,EAArB,EAAqBA,KAAM4H,EAA3B,EAA2BA,OAC3B,OACI,cAAC4C,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,OAAK,EAACC,QAAM,EAA3C,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,UADjE,kBAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,cAAc9C,KAAK,eAC9C,cAACuC,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAU9C,KAAK,WAC1C,cAACuC,EAAA,EAAKI,KAAN,UACI,cAACU,EAAA,EAAD,CAAQT,GAAIC,IAASC,GAAG,kBAAkBQ,UAAQ,EAAC9C,QAAQ,sBAE/D,eAAC+B,EAAA,EAAKI,KAAN,CAAWY,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOP,KAAS,OAAJlL,QAAI,IAAJA,OAAA,EAAAA,EAAM8B,QAAS,mBAAoB4J,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAE9L,QAAF,IAAEA,OAAF,EAAEA,EAAM6B,YAA1C,SACI,eAAC+J,EAAA,EAASpB,KAAV,WACI,cAACoB,EAAA,EAAShB,KAAV,CAAeC,GAAIkB,IAAMhB,GAAE,2BAAe/K,QAAf,IAAeA,OAAf,EAAeA,EAAMG,UAAY2L,KAAK,aAAaE,KAAK,SACnF,cAACJ,EAAA,EAAShB,KAAV,CAAeqB,QAASrE,EAAQkE,KAAK,SAASE,KAAK,0B,6GCfhEzB,gBAAS,YAA2C,IAAD,EAAlB5J,EAAkB,EAAlBA,QAC5C,EAAoC0J,IAA5B3B,EAAR,EAAQA,aAAclF,EAAtB,EAAsBA,UACd5C,EAA6B8H,EAA7B9H,gBAAiBwB,EAAYsG,EAAZtG,QAEzB,IAAI,UAAAoB,EAAUxD,YAAV,eAAgBG,YAAaQ,EAAQR,SAAU,OAAO,KAO1D,OACI,eAAC+L,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAACjB,MAAO,CAAEkB,MAAO,QAAxC,SACI,cAAChB,EAAA,EAAD,CACIiB,OAAK,EACLC,MAAM,OACN/D,QAAS9H,EAAQoE,UAAY,YAAc,oBAGnD,cAACmH,GAAA,EAAOE,QAAR,CAAgBK,QAAM,EAACrB,MAAO,CAAEkB,MAAO,QAAvC,SACI,cAAChB,EAAA,EAAD,CACIiB,OAAK,EACLG,OAAK,EACLF,MAAO7L,EAAQoE,UAAY,MAAQ,QACnC0D,QAAS9H,EAAQoE,UAAY,WAAa,SAC1C3C,QAASA,EACT6J,QAAS,SAACU,GAAD,OArBzB,SAAsBA,EAAmBxM,GACrCwM,EAAEC,iBACFjM,EAAQoE,UAAYnE,EAAgBT,GAAU,GAASS,EAAgBT,GAAU,GAmBrD0M,CAAaF,EAAGhM,EAAQR,qBC1B7CoK,gBAAS,YAA0C,IAAnB5J,EAAkB,EAAlBA,QAM3C,OACI,eAACmM,GAAA,EAAD,CAAMjC,GAAIkB,IAAMhB,GAAE,oBAAepK,EAAQR,UAAzC,UACI,cAACsL,EAAA,EAAD,CAAOP,IAAKvK,EAAQmB,OAAS,qBAC7B,eAACgL,GAAA,EAAKV,QAAN,WACI,cAACU,GAAA,EAAKC,OAAN,UAAcpM,EAAQkB,cACtB,cAACiL,GAAA,EAAKE,YAAN,UAVZ,SAAkBC,GACd,GAAIA,EACA,OAAOA,EAAIC,OAAS,GAAKD,EAAIE,UAAU,EAAG,IAAM,MAAQF,EAQjCG,CAASzM,EAAQ0M,UAExC,eAACP,GAAA,EAAKV,QAAN,CAAckB,OAAK,EAAnB,UACI,cAACC,EAAA,EAAD,CAAMtF,KAAK,SACVtH,EAAQqE,eAFb,gBAIA,cAAC,GAAD,CAAcrE,QAASA,UCjBpB4J,gBAAS,YAAyD,IAArB7G,EAAoB,EAApBA,UAClD8J,EAAS,CACXC,YAAa,SACbC,YAAa,GAGjB,OACI,cAACC,EAAA,EAAD,CAAMC,YAAU,EAAhB,SACKlK,EAAUmK,KAAI,SAAAzJ,GAAQ,OACnB,cAAC0J,GAAA,EAAD,CACIC,WAAS,EAETC,QACI,cAACL,EAAA,EAAK/C,KAAN,CAAmCC,GAAIkB,IAAMhB,GAAE,oBAAe3G,EAASjE,UAAvE,SACI,cAACsL,EAAA,EAAD,CACIwC,KAAK,OACLC,UAAQ,EAAChD,IAAK9G,EAAStC,OAAS,mBAChCqM,UAAQ,EACR/C,MAAOhH,EAASW,UAAYyI,EAAS,QAL7BpJ,EAASjE,UAJjC,SAcI,cAAC2N,GAAA,EAAM1B,QAAP,UACI,cAAC,GAAD,CAAazL,QAASyD,OAbrBA,EAASjE,kBCXnB,SAASiO,GAAT,GAAgD,IAAD,IAAnB1O,EAAmB,EAAnBA,SACvC,OACI,eAAC2O,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,WACK3O,EAASkF,aACN,cAAC2J,EAAA,EAAD,CAAOC,SAAS,MAAMhC,MAAM,MAAM/D,QAAQ,YAAY2C,MAAO,CAAEqD,UAAW,YAE9E,cAAC7D,EAAA,EAAK0D,MAAN,UACI,eAAC1D,EAAA,EAAD,WACI,cAACA,EAAA,EAAKa,MAAN,CAAYL,MAAO,CAAEsD,aAAc,GAAKT,KAAK,OAAOC,UAAQ,EAAChD,KAAK,UAAAxL,EAASoE,YAAT,eAAehC,QAAS,qBAC1F,eAAC8I,EAAA,EAAKwB,QAAN,WACI,cAACxB,EAAA,EAAKmC,OAAN,CAAalC,GAAIkB,IAAMhB,GAAE,sBAAiBrL,EAASF,IAAnD,SACKE,EAAS4B,QAEd,eAACsJ,EAAA,EAAKoC,YAAN,wBAA4B,cAAC,IAAD,CAAMjC,GAAE,oBAAerL,EAASmE,cAAhC,mBACvBnE,EAASoE,YADc,aACvB,EAAejC,iBAEnBnC,EAASkE,QACN,cAACgH,EAAA,EAAKoC,YAAN,UACI,cAACuB,EAAA,EAAD,CAAO7B,OAAK,EAACF,MAAM,SAAnB,6CAKP9M,EAAS+D,UAAY/D,EAASkE,QAC3B,cAACgH,EAAA,EAAKoC,YAAN,UACI,cAACuB,EAAA,EAAD,CAAO7B,OAAK,EAACF,MAAM,QAAnB,yDASxB,cAAC6B,EAAA,EAAD,UACI,iCACI,cAACd,EAAA,EAAD,CAAMtF,KAAK,UAAW/B,kBAAOxG,EAAS+B,KAAO,uBAC7C,cAAC8L,EAAA,EAAD,CAAMtF,KAAK,SAASmD,MAAO,CAAEuD,WAAY,SAAYjP,EAASiC,WAGtE,cAAC0M,EAAA,EAAD,CAASO,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0BlL,UAAWhE,EAASgE,cAElD,eAAC2K,EAAA,EAAD,CAASQ,UAAQ,EAAjB,UACI,+BAAOnP,EAAS8B,cAChB,cAAC8J,EAAA,EAAD,CACIT,GAAIkB,IACJhB,GAAE,sBAAiBrL,EAASF,IAC5BgN,MAAM,OACNsC,QAAQ,QACRrG,QAAQ,eCxDb8B,oBAAS,WACpB,IACQwE,EADkB1E,IAAlBlD,cACA4H,kBAER,OACI,mCACKA,EAAkBlB,KAAI,mCAAEmB,EAAF,KAAS/I,EAAT,YACnB,eAAC,WAAD,WACI,cAAC8G,EAAA,EAAD,CAAQkC,KAAG,EAACzC,MAAM,OAAlB,SACKwC,IAEJ/I,EAAW4H,KAAI,SAAAnO,GAAQ,OACpB,cAAC0O,GAAD,CAAoC1O,SAAUA,GAAvBA,EAASF,SALzBwP,W,UCRhB,SAASE,KACpB,MAAuD7E,IAA/ClD,cAAiBrG,EAAzB,EAAyBA,UAAW2B,EAApC,EAAoCA,aACpC,OACI,qCACI,eAAC+H,EAAA,EAAD,CAAM2E,UAAQ,EAAClB,KAAK,QAAQ7C,MAAO,CAAEkB,MAAO,OAAQ8C,UAAW,QAA/D,UACI,cAACrC,EAAA,EAAD,CAAQf,KAAK,SAASwC,UAAQ,EAAChC,MAAM,OAAO/D,QAAQ,YACpD,cAAC+B,EAAA,EAAKI,KAAN,CACInC,QAAQ,iBACR4G,OAAQvO,EAAUwO,IAAI,OACtBrD,QAAS,kBAAMxJ,EAAa,MAAO,WAEvC,cAAC+H,EAAA,EAAKI,KAAN,CACInC,QAAQ,YACR4G,OAAQvO,EAAUwO,IAAI,WACtBrD,QAAS,kBAAMxJ,EAAa,UAAW,WAE3C,cAAC+H,EAAA,EAAKI,KAAN,CACInC,QAAQ,cACR4G,OAAQvO,EAAUwO,IAAI,UACtBrD,QAAS,kBAAMxJ,EAAa,SAAU,cAG9C,cAACsK,EAAA,EAAD,IACA,cAAC,KAAD,CACIwC,SAAU,SAAC9N,GAAD,OAAUgB,EAAa,YAAahB,IAC9CiB,MAAO5B,EAAUjC,IAAI,cAAgB,IAAIoF,U,mCC3B1C,SAASuL,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAalD,OAAK,EAACnB,MAAO,CAAEgE,UAAW,IAAvC,SACI,eAACf,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAASjD,MAAO,CAAEsE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAY1C,OAAb,CAAoBjL,OAAK,EAAzB,UACI,cAAC2N,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACtB,EAAA,EAAD,UACI,eAACoB,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACtB,EAAA,EAAD,CAASO,WAAS,EAACxD,MAAO,CAAEsE,UAAW,MACvC,cAACrB,EAAA,EAAD,CAASQ,UAAQ,EAAjB,SACI,cAACvD,EAAA,EAAD,CAAQuE,UAAQ,EAACrD,MAAM,OAAOsC,QAAQ,QAAQrG,QAAQ,kBCjB/D8B,oBAAS,WACpB,IAAQpD,EAAkBkD,IAAlBlD,cACAtE,EAAkEsE,EAAlEtE,eAAgBb,EAAkDmF,EAAlDnF,iBAAkBQ,EAAgC2E,EAAhC3E,gBAAiBnG,EAAe8K,EAAf9K,WAC3D,EAAsCyT,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAYA,OAJAC,qBAAU,WACFjO,EAAiBiM,MAAQ,GAAGpL,MACjC,CAACb,EAAiBiM,KAAMpL,IAGvB,eAACqN,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa7D,MAAM,KAAnB,SACKnF,EAAc9E,iBAAmB0N,EAC9B,qCACI,cAACP,GAAD,IACA,cAACA,GAAD,OAGJ,cAAC,KAAD,CACIY,UAAW,EACXC,SArBpB,WACIL,GAAe,GACfxN,EAAgB,IAAIjG,EAAaF,EAAYiU,YAAc,IAC3DzN,IAAiB/D,MAAK,kBAAMkR,GAAe,OAmB3BO,SAAUR,KAAiB1T,GAAcA,EAAWiU,YAAcjU,EAAWmU,WAC7EC,aAAa,EAJjB,SAMI,cAAC,GAAD,QAIZ,cAACP,EAAA,EAAKC,OAAN,CAAa7D,MAAM,IAAnB,SACI,cAAC4C,GAAD,MAEJ,cAACgB,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACI,cAACoE,EAAA,EAAD,CAAQrB,OAAQU,Y,4BCrCjB,SAASY,GAAYC,GAChC,MAAsBC,aAASD,EAAM3I,MAArC,mBAAO6I,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYrT,MAAOmT,EAAKG,WAAaH,EAAKnT,MAA1C,UACI,gCAAQgT,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAKnT,MAClB,cAAC2Q,EAAA,EAAD,CAAO7B,OAAK,EAACF,MAAM,MAAnB,SAA0BuE,EAAKnT,QAC/B,QCZD2M,oBAAS,WACpB,IAAQ/G,EAAc6G,IAAd7G,UACR,OACA,cAAC,KAAD,CACQ4N,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAI1T,MAAO,MACjD2T,SAAU,SAAC7L,EAAD,OAAW8L,EAAX,EAAWA,UAAX,OAA2BhO,EAAUzD,MAAM2F,GAAQ+D,OAAM,SAAA7L,GAAK,OACpE4T,EAAU,CAAE5T,MAAO,kCAH/B,SAKS,gBAAG6T,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAc1T,EAA/B,EAA+BA,OAA/B,OACG,eAACgT,GAAA,EAAD,CAAMW,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAAC7E,EAAA,EAAD,CAAQlC,GAAG,KAAKpC,QAAQ,wBAAwB+D,MAAM,OAAOiC,UAAU,WACvE,cAACkC,GAAD,CAAa1I,KAAK,QAAQ4J,YAAY,UACtC,cAAClB,GAAD,CAAa1I,KAAK,WAAW4J,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACI7J,KAAK,QAAQ8J,OAAQ,kBACjB,cAACxD,EAAA,EAAD,CAAOnD,MAAO,CAAEsD,aAAc,IAAMhC,OAAK,EAACF,MAAM,MAAM/D,QAASzK,EAAOJ,WAE9E,cAAC0N,EAAA,EAAD,CAAQlJ,QAASsP,EAAcnG,UAAQ,EAAC9C,QAAQ,QAAQqJ,KAAK,SAASvF,OAAK,a,mBCjBhF,SAASyF,GAAT,GAA8C,IAAlBhU,EAAiB,EAAjBA,OACvC,OACI,cAACiU,GAAA,EAAD,CAASrU,OAAK,EAAd,SACKI,GACG,cAACiU,GAAA,EAAQtE,KAAT,UACK3P,EAAO6P,KAAI,SAACqE,EAAUC,GAAX,OACR,cAACF,GAAA,EAAQrH,KAAT,UAAuBsH,GAAJC,UCJ5B5H,oBAAS,WACpB,IAAQ/G,EAAc6G,IAAd7G,UACR,OACI,cAAC,KAAD,CACI4N,cAAe,CAAEvP,YAAa,GAAI1B,SAAU,GAAIkR,MAAO,GAAIC,SAAU,GAAI1T,MAAO,MAChF2T,SAAU,SAAC7L,EAAD,OAAW8L,EAAX,EAAWA,UAAX,OAA2BhO,EAAUvD,SAASyF,GAAQ+D,OAAM,SAAA7L,GAAK,OACvE4T,EAAU,CAAE5T,cAChBwU,iBAAkBC,KAAW,CACzBxQ,YAAawQ,OAAaC,WAC1BnS,SAAUkS,OAAaC,WACvBjB,MAAOgB,OAAaC,WAAWjB,QAC/BC,SAAUe,OAAaC,aAR/B,SAWK,gBAAGb,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAc1T,EAA/B,EAA+BA,OAAQuU,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACG,eAACxB,GAAA,EAAD,CAAMW,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAAC7E,EAAA,EAAD,CAAQlC,GAAG,KAAKpC,QAAQ,0BAA0B+D,MAAM,OAAOiC,UAAU,WACzE,cAACkC,GAAD,CAAa1I,KAAK,cAAc4J,YAAY,iBAC5C,cAAClB,GAAD,CAAa1I,KAAK,WAAW4J,YAAY,aACzC,cAAClB,GAAD,CAAa1I,KAAK,QAAQ4J,YAAY,UACtC,cAAClB,GAAD,CAAa1I,KAAK,WAAW4J,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACI7J,KAAK,QAAQ8J,OAAQ,kBACjB,cAACC,GAAD,CAAkBhU,OAAQA,EAAOJ,WAEzC,cAAC0N,EAAA,EAAD,CAAQuE,UAAW0C,IAAYC,GAASd,EACpCtP,QAASsP,EAAcnG,UAAQ,EAAC9C,QAAQ,WAAWqJ,KAAK,SAASvF,OAAK,aC3B/EhC,gBAAS,WACpB,MAAkCF,IAA1B7G,EAAR,EAAQA,UAAWkE,EAAnB,EAAmBA,WACnB,OACI,cAAC2G,EAAA,EAAD,CAAS5D,UAAQ,EAACgE,UAAU,SAASU,UAAQ,EAACwC,UAAU,WAAxD,SACI,eAAChH,EAAA,EAAD,CAAWmB,MAAI,EAAf,UACI,eAACiB,EAAA,EAAD,CAAQlC,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACgB,EAAA,EAAD,CAAOwC,KAAK,UAAU/C,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEsD,aAAc,MADnF,kBAIClL,EAAUiP,WACP,qCACI,cAAC1F,EAAA,EAAD,CAAQlC,GAAG,KAAKJ,UAAQ,EAAChC,QAAQ,4BACjC,cAAC6C,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAckD,KAAK,OAAOxD,UAAQ,EAAvD,kCAKJ,qCACI,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAMvE,EAAWc,UAAU,cAAC,GAAD,MAAgByF,KAAK,OAAOxD,UAAQ,EAAhF,oBAGA,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAMvE,EAAWc,UAAU,cAAC,GAAD,MAAmByF,KAAK,OAAOxD,UAAQ,EAAnF,kC,UCrBT,SAASiI,GAAT,GAA8E,IAAD,IAAjDjI,gBAAiD,aAAhChC,eAAgC,MAAtB,aAAsB,EACxF,OACI,cAACkK,GAAA,EAAD,CAAQtD,QAAQ,EAAM5E,SAAUA,EAAhC,SACI,cAACiG,EAAA,EAAD,CAAQjI,QAASA,MCAd,SAASmK,GAAWhC,GAC/B,MAAsBC,aAASD,EAAM3I,MAArC,mBAAO6I,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYrT,MAAOmT,EAAKG,WAAaH,EAAKnT,MAA1C,UACI,gCAAQgT,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAKnT,MAClB,cAAC2Q,EAAA,EAAD,CAAO7B,OAAK,EAACF,MAAM,MAAnB,SAA0BuE,EAAKnT,QAC/B,Q,cCRD,SAASiV,GAAcjC,GAClC,MAA+BC,aAASD,EAAM3I,MAA9C,mBAAO6I,EAAP,KAAcC,EAAd,KAAoB+B,EAApB,KACA,OACI,eAAC9B,GAAA,EAAKC,MAAN,CAAYrT,MAAOmT,EAAKG,WAAaH,EAAKnT,MAA1C,UACI,gCAAQgT,EAAMO,QACd,cAAC4B,GAAA,EAAD,CACIC,WAAS,EACTC,QAASrC,EAAMqC,QACfvQ,MAAOoO,EAAMpO,OAAS,KACtB6M,SAAU,SAAC5C,EAAGuG,GAAJ,OAAUJ,EAAQK,SAASD,EAAExQ,QACvC0Q,OAAQ,kBAAMN,EAAQO,YAAW,IACjCxB,YAAajB,EAAMiB,cAEtBd,EAAKG,SAAWH,EAAKnT,MAClB,cAAC2Q,EAAA,EAAD,CAAO7B,OAAK,EAACF,MAAM,MAAnB,SAA0BuE,EAAKnT,QAC/B,QC1BT,IAAM0V,GAAkB,CAC3B,CAAExH,KAAM,SAAUpJ,MAAO,UACzB,CAAEoJ,KAAM,UAAWpJ,MAAO,WAC1B,CAAEoJ,KAAM,OAAQpJ,MAAO,QACvB,CAAEoJ,KAAM,OAAQpJ,MAAO,QACvB,CAAEoJ,KAAM,QAASpJ,MAAO,SACxB,CAAEoJ,KAAM,SAAUpJ,MAAO,W,qBCDd,SAAS6Q,GAAY3C,GAChC,MAA+BC,aAASD,EAAM3I,MAA9C,mBAAO6I,EAAP,KAAcC,EAAd,KAAoB+B,EAApB,KACA,OACI,eAAC9B,GAAA,EAAKC,MAAN,CAAYrT,MAAOmT,EAAKG,WAAaH,EAAKnT,MAA1C,UACI,cAAC,KAAD,uCACQkT,GACAF,GAFR,IAGI4C,SAAW1C,EAAMpO,OAAS,IAAIuB,KAAK6M,EAAMpO,QAAW,KACpD6M,SAAU,SAAA7M,GAAK,OAAIoQ,EAAQK,SAASzQ,OAEvCqO,EAAKG,SAAWH,EAAKnT,MAClB,cAAC2Q,EAAA,EAAD,CAAO7B,OAAK,EAACF,MAAM,MAAnB,SAA0BuE,EAAKnT,QAC/B,Q,cCAD2M,gBAAS,WACpB,IAAMrM,EAAUuV,eACRtM,EAAkBkD,IAAlBlD,cACAhD,EAAiEgD,EAAjEhD,eAAgBG,EAAiD6C,EAAjD7C,eAAgBjB,EAAiC8D,EAAjC9D,aAAchB,EAAmB8E,EAAnB9E,eAC9C7C,EAAOkU,eAAPlU,GAER,EAAgCsQ,mBAA6B,IAAI1O,GAAjE,mBAAO1B,EAAP,KAAiBuD,EAAjB,KAEMmP,EAAmBC,KAAW,CAChC/Q,MAAO+Q,OAAaC,SAAS,kCAC7B9Q,YAAa6Q,OAAaC,SAAS,wCACnC/Q,SAAU8Q,OAAaC,WACvB7Q,KAAM4Q,OAAaC,SAAS,oBAAoBqB,WAChDhS,MAAO0Q,OAAaC,WACpB5Q,KAAM2Q,OAAaC,aAoBvB,OAjBArC,qBAAU,WACFzQ,GAAI6D,EAAa7D,GAAIV,MAAK,SAAAY,GAAQ,OAAIuD,EAAY,IAAI7B,EAAmB1B,SAC9E,CAACF,EAAI6D,IAeJhB,EAAuB,cAACqQ,GAAD,CAAkBjK,QAAQ,wBAGjD,eAAC4F,EAAA,EAAD,CAASQ,UAAQ,EAAjB,UACI,cAAC9B,EAAA,EAAD,CAAQtE,QAAQ,mBAAmBwG,KAAG,EAACzC,MAAM,SAC7C,cAAC,KAAD,CACI4F,iBAAkBA,EAClBwB,oBAAkB,EAClBxC,cAAe1R,EACf6R,SAAU,SAAA7L,GAAM,OAtB5B,SAA0BhG,GACtB,GAAKA,EAASF,GAQV8E,EAAe5E,GAAUZ,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BuB,EAASF,YAR3D,CACd,IAAI6E,EAAW,2BACR3E,GADQ,IAEXF,GAAIqU,iBAER1P,EAAeE,GAAavF,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BkG,EAAY7E,SAgBvDsU,CAAiBpO,IAJzC,SAKK,gBAAG+L,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASb,EAA1B,EAA0BA,aAAcc,EAAxC,EAAwCA,MAAxC,OACG,eAAC,KAAD,CAAMb,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACjB,GAAD,CAAakB,YAAY,QAAQ5J,KAAK,UACtC,cAAC2K,GAAD,CAAYmB,KAAM,EAAGlC,YAAY,cAAc5J,KAAK,gBACpD,cAAC4K,GAAD,CAAeI,QAASK,GAAiBzB,YAAY,WAAW5J,KAAK,aACrE,cAACsL,GAAD,CACIS,gBAAgB,OAChB/L,KAAK,OACLgM,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEf,cAACpH,EAAA,EAAD,CAAQtE,QAAQ,mBAAmBwG,KAAG,EAACzC,MAAM,SAC7C,cAACmE,GAAD,CAAakB,YAAY,OAAO5J,KAAK,SACrC,cAAC0I,GAAD,CAAakB,YAAY,QAAQ5J,KAAK,UACtC,cAACqD,EAAA,EAAD,CACIuE,SAAU6B,IAAiBc,IAAUD,EACrCnQ,QAASsP,EACT5C,QAAQ,QAAQvD,UAAQ,EAACuG,KAAK,SAASrJ,QAAQ,WACnD,cAAC6C,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAc+D,QAAQ,QAAQgD,KAAK,SAASrJ,QAAQ,uB,oBCnElF8B,gBAAS,YAAsD,IAAtBxB,EAAqB,EAArBA,WAC5CJ,EAAiB0B,IAAjB1B,aAWR,OATAsH,qBAAU,WAIN,OAHIlH,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaqB,mBAElB,CAACrB,EAAcI,IAGd,qCACI,cAACsF,EAAA,EAAD,CACII,UAAU,SACVD,SAAS,MACT/D,UAAQ,EACR+B,MAAM,OACNpB,MAAO,CAAEgJ,OAAQ,QALrB,SAOI,cAACrH,EAAA,EAAD,sCAEJ,eAACsB,EAAA,EAAD,CAASG,UAAQ,EAACK,UAAQ,EAA1B,UACI,cAAC,KAAD,CACI0C,SAAU,SAAC7L,EAAD,OAAW2O,EAAX,EAAWA,UAAX,OAA2B1L,EAAasB,WAAWvE,GAAQ5G,MAAK,kBAAMuV,QAChFjD,cAAe,CAAErS,KAAM,IACvBqT,iBAAkBC,KAAW,CACzBtT,KAAMsT,OAAaC,aAJ3B,SAOK,gBAAGZ,EAAH,EAAGA,aAAca,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAA1B,OACG,cAAC,KAAD,CAAME,UAAU,UAAhB,SACI,cAAC,KAAD,CAAO1J,KAAK,OAAZ,SACK,SAAC2I,GAAD,OACG,sBAAKxF,MAAO,CAAEI,SAAU,YAAxB,UACI,cAACkF,EAAA,EAAD,CAAQrB,OAAQqC,IAChB,kDACIG,YAAY,kEACZkC,KAAM,GACFnD,EAAME,OAHd,IAIIwD,WAAY,SAAA3H,GACM,UAAVA,EAAEtO,KAAmBsO,EAAE4H,UAGb,UAAV5H,EAAEtO,KAAoBsO,EAAE4H,WACxB5H,EAAEC,iBACF2F,GAAWd,oBAU/C,cAAC+C,GAAA,EAAQlG,MAAT,UACK3F,EAAaC,SAASiF,KAAI,SAAAlE,GAAO,OAC9B,eAAC6K,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBvJ,IAAKvB,EAAQ7H,OAAS,qBACtC,eAAC0S,GAAA,EAAQpI,QAAT,WACI,cAACoI,GAAA,EAAQE,OAAT,CAAgB7J,GAAIkB,IAAMhB,GAAE,oBAAepB,EAAQxJ,UAAnD,SACKwJ,EAAQ9H,cAEb,cAAC2S,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoBjL,EAAQC,WAAlC,YAEJ,cAAC4K,GAAA,EAAQK,KAAT,CAAczJ,MAAO,CAAE0J,WAAY,YAAnC,SAAkDnL,EAAQ5K,YATpD4K,EAAQnK,kBChExCuV,GAAqB,CACvBrQ,OAAQ,mBAGNsQ,GAAyB,CAC3BxJ,SAAU,WACVyJ,OAAQ,KACRC,KAAM,KACN5I,MAAO,OACP6I,OAAQ,OACR3I,MAAO,SAOIjC,gBAAS,YAAsD,IAAD,IAAnB7K,EAAmB,EAAnBA,SACtD,EAA+E2K,IAAvElD,cAAiB1C,EAAzB,EAAyBA,iBAAkBrC,EAA3C,EAA2CA,QAASuC,EAApD,EAAoDA,qBACpD,OACI,eAAC0J,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,CAAS3B,OAAK,EAAC8B,SAAS,MAAMpD,MAAO,CAAEgK,QAAS,KAAhD,UACK1V,EAASkF,aACN,cAAC2J,EAAA,EAAD,CAAOnD,MAAO,CAAEI,SAAU,WAAY6J,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAChEC,OAAK,EAAC/I,MAAM,MAAM/D,QAAQ,cAElC,cAACgD,EAAA,EAAD,CAAOP,IAAG,iCAA4BxL,EAAS6B,SAArC,QAAqDgL,OAAK,EAACnB,MAAO2J,KAC5E,cAAC1G,EAAA,EAAD,CAASjD,MAAO4J,GAAwBtI,OAAK,EAA7C,SACI,cAAC9B,EAAA,EAAK0D,MAAN,UACI,cAAC1D,EAAA,EAAD,UACI,eAACA,EAAA,EAAKwB,QAAN,WACI,cAACW,EAAA,EAAD,CACIkB,KAAK,OACLxF,QAAS/I,EAAS4B,MAClB8J,MAAO,CAAEoB,MAAO,WAEpB,4BAAItG,kBAAOxG,EAAS+B,KAAO,iBAC3B,2CACc,iCAAQ,cAAC,IAAD,CAAMsJ,GAAE,8BAAerL,EAASoE,YAAxB,aAAe,EAAe3D,UAAtC,mBAAmDT,EAASoE,YAA5D,aAAmD,EAAejC,+BAO5G,cAACwM,EAAA,EAAD,CAASQ,UAAQ,EAACL,SAAS,SAA3B,SACK9O,EAASkE,OACN,qCACI,cAAC0H,EAAA,EAAD,CACIkB,MAAO9M,EAASkF,YAAc,QAAU,MACxCkK,QAAQ,OACRpC,OAAK,EACLjE,QAAS/I,EAASkF,YAAc,uBAAyB,kBACzDqH,QAAStH,EACTvC,QAASA,IAEb,cAACkJ,EAAA,EAAD,CAAQT,GAAIkB,IACR8D,SAAUnQ,EAASkF,YACnBmG,GAAE,kBAAarL,EAASF,IACxBgN,MAAM,SACNsC,QAAQ,QAJZ,6BAQJpP,EAAS+D,QACT,cAAC6H,EAAA,EAAD,CAAQW,QAASxH,EAAkBrC,QAASA,EAA5C,+BAEA,cAACkJ,EAAA,EAAD,CAAQuE,SAAUnQ,EAASkF,YACvBqH,QAASxH,EAAkBrC,QAASA,EAASoK,MAAM,OADvD,mCCjELjC,gBAAS,YAAoD,IAApB7K,EAAmB,EAAnBA,SACpD,OACI,eAAC2O,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAASG,SAAS,MAAlB,SACI,eAAC0B,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa7D,MAAO,EAApB,SACI,cAACiB,EAAA,EAAD,CAAMU,KAAK,QAAQzB,MAAM,OAAOvE,KAAK,WAEzC,cAACiI,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACI,4BAAI5M,EAAS8B,qBAIzB,cAAC6M,EAAA,EAAD,CAASG,UAAQ,EAAjB,SACI,eAAC0B,EAAA,EAAD,CAAMsF,cAAc,SAApB,UACI,cAACtF,EAAA,EAAKC,OAAN,CAAa7D,MAAO,EAApB,SACI,cAACiB,EAAA,EAAD,CAAMtF,KAAK,WAAWgG,KAAK,QAAQzB,MAAM,WAE7C,cAAC0D,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACI,+BACKpG,kBAAOxG,EAAS+B,KAAO,iCAKxC,cAAC4M,EAAA,EAAD,CAASG,UAAQ,EAAjB,SACI,eAAC0B,EAAA,EAAD,CAAMsF,cAAc,SAApB,UACI,cAACtF,EAAA,EAAKC,OAAN,CAAa7D,MAAO,EAApB,SACI,cAACiB,EAAA,EAAD,CAAMtF,KAAK,SAASgG,KAAK,QAAQzB,MAAM,WAE3C,cAAC0D,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACI,iCAAO5M,EAASiC,MAAhB,KAAyBjC,EAASgC,qBChC3C6I,gBAAS,YAA4E,IAAD,IAAxC7K,SAAYgE,EAA4B,EAA5BA,UAAWI,EAAiB,EAAjBA,KAC9E,OAAKJ,EAED,qCACI,eAAC2K,EAAA,EAAD,CACII,UAAU,SACVrD,MAAO,CAAEgJ,OAAQ,QACjB5F,SAAS,MACTI,WAAS,EACTnE,UAAQ,EACR+B,MAAM,OANV,UAQK9I,EAAUwJ,OARf,IAQ6C,IAArBxJ,EAAUwJ,OAAe,SAAW,SAR5D,YAUA,cAACmB,EAAA,EAAD,CAASG,UAAQ,EAAjB,SACI,cAACb,EAAA,EAAD,CAAM8H,SAAO,EAACC,SAAO,EAArB,SACKhS,EAAUmK,KAAI,SAAAzJ,GAAQ,OACnB,eAACwG,EAAA,EAAD,CAAMQ,MAAO,CAAEI,SAAU,YAAzB,UACKpH,EAASjE,YAAT,OAAsB2D,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM3D,WACzB,cAACoO,EAAA,EAAD,CACInD,MAAO,CAAEI,SAAU,YACnBgB,MAAM,SACNmJ,OAAO,QAHX,kBAQJ,cAAClK,EAAA,EAAD,CAAOwC,KAAK,OAAO/C,IAAK9G,EAAStC,OAAS,qBAC1C,eAAC8I,EAAA,EAAKwB,QAAN,CAAcoJ,cAAc,SAA5B,UACI,cAAC5K,EAAA,EAAKmC,OAAN,CAAalC,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,oBAAe3G,EAASjE,UAAhC,SAA6CiE,EAASvC,gBAEzDuC,EAASW,WACN,cAAC6F,EAAA,EAAKgL,MAAN,CAAYxK,MAAO,CAAEoB,MAAO,UAA5B,4BAhBgCpI,EAASjE,oBAhBlD,QCEZoK,gBAAS,WAEpB,IAAQpD,EAAkBkD,IAAlBlD,cACkBzH,EAAkEyH,EAApFjF,iBAA4BmB,EAAwD8D,EAAxD9D,aAAchB,EAA0C8E,EAA1C9E,eAAgBwC,EAA0BsC,EAA1BtC,sBAC1DrF,EAAOkU,eAAPlU,GAOR,OALAyQ,qBAAU,WAEN,OADIzQ,GAAI6D,EAAa7D,GACd,kBAAMqF,OACd,CAACrF,EAAI6D,EAAcwB,IAElBxC,IAAmB3C,EAAiB,cAACgT,GAAD,IAGpC,eAACxC,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,UACI,cAAC,GAAD,CAAwB5M,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsBqJ,WAAYrJ,EAASF,QAE/C,cAAC0Q,EAAA,EAAKC,OAAN,CAAa7D,MAAO,EAApB,SACI,cAAC,GAAD,CAAyB5M,SAAUA,YC5BpC,SAASmW,KACpB,IAEA,EAA4B/F,mBAAS,MAArC,mBAAO9R,EAAP,KAAewT,EAAf,KA0BA,OACI,qCACI,cAACzE,EAAA,EAAD,CAAQlC,GAAG,KAAKpC,QAAQ,yBACxB,cAAC4F,EAAA,EAAD,UACI,eAAC/C,EAAA,EAAOgD,MAAR,CAAcwH,OAAO,IAArB,UACI,cAACxK,EAAA,EAAD,CAAQW,QA7BxB,WACItP,IAAMkC,IAAIkX,wBAA8BtM,OAAM,SAAAyI,GAAG,OAAI/O,QAAQC,IAAI8O,EAAI1U,cA4BxBiL,QAAQ,YAAYiE,OAAK,EAACsJ,SAAO,IAClE,cAAC1K,EAAA,EAAD,CAAQW,QA1BxB,WACItP,IAAMkC,IAAIkX,0BAAgCtM,OAAM,SAAAyI,GAAG,OAAI/O,QAAQC,IAAI8O,EAAI1U,cAyBxBiL,QAAQ,cAAciE,OAAK,EAACsJ,SAAO,IACtE,cAAC1K,EAAA,EAAD,CAAQW,QAXxB,WACItP,IAAMqC,KAAK+W,kBAAyB,IAAItM,OAAM,SAAAyI,GAAG,OAAIV,EAAUU,OAUXzJ,QAAQ,mBAAmBiE,OAAK,EAACsJ,SAAO,IAChF,cAAC1K,EAAA,EAAD,CAAQW,QAxBxB,WACItP,IAAMkC,IAAIkX,2BAAiCtM,OAAM,SAAAyI,GAAG,OAAI/O,QAAQC,IAAI8O,EAAI1U,cAuBxBiL,QAAQ,eAAeiE,OAAK,EAACsJ,SAAO,IACxE,cAAC1K,EAAA,EAAD,CAAQW,QArBxB,WACItP,IAAMkC,IAAIkX,2BAAiCtM,OAAM,SAAAyI,GAAG,OAAI/O,QAAQC,IAAI8O,EAAI1U,cAoBvBiL,QAAQ,eAAeiE,OAAK,EAACsJ,SAAO,IACzE,cAAC1K,EAAA,EAAD,CAAQW,QAlBxB,WACItP,IAAMkC,IAAIkX,4BAAkCtM,OAAM,SAAAyI,GAAG,OAAI/O,QAAQC,IAAI8O,EAAI1U,cAiB7BiL,QAAQ,WAAWiE,OAAK,EAACsJ,SAAO,SAGvEhY,GACG,cAACgU,GAAD,CAAkBhU,OAAQA,OC5C3B,SAASiY,KACpB,OACI,eAAC5H,EAAA,EAAD,CAASwD,aAAW,EAApB,UACI,eAAC9E,EAAA,EAAD,CAAQf,MAAI,EAAZ,UACI,cAACuB,EAAA,EAAD,CAAMtF,KAAK,WADf,wDAIA,cAACoG,EAAA,EAAQ6H,OAAT,UACI,cAAC5K,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,aAAaiL,SAAO,EAAzC,4CCRD,SAASG,KAAe,IAAD,IAC1B9Y,EAAgBgN,IAAhBhN,YACR,OACI,eAACsN,EAAA,EAAD,WACI,cAACoC,EAAA,EAAD,CAAQlC,GAAG,KAAKpC,QAAQ,iBACxB,cAACsE,EAAA,EAAD,CAAQkC,KAAG,EAACpE,GAAG,KAAK2B,MAAM,MAAM/D,QAAO,UAAEpL,EAAYO,aAAd,aAAE,EAAmBwY,WAC3D,UAAA/Y,EAAYO,aAAZ,eAAmB2B,UAChB,eAAC8O,EAAA,EAAD,WACI,cAACtB,EAAA,EAAD,CAAQlC,GAAG,KAAKpC,QAAQ,cAAc+D,MAAM,SAC5C,sBAAMpB,MAAO,CAAEgE,UAAW,QAA1B,SAAqC/R,EAAYO,MAAM2B,gB,cCR5DgL,gBAAS,WACpB,IAAQ7C,EAAe2C,IAAf3C,WAER,OACI,cAAC2O,GAAA,EAAD,CAAO9N,KAAMb,EAAWY,MAAMC,KAAM+N,QAAS5O,EAAWC,WAAYsG,KAAK,OAAzE,SACI,cAACoI,GAAA,EAAMjK,QAAP,UACK1E,EAAWY,MAAMvJ,Y,UCGnBwL,gBAAS,YAAkD,IAAvBgM,EAAsB,EAAtBA,YAC/C,EAAqDlM,IAA7C3B,aAAgB/H,EAAxB,EAAwBA,QAASsG,EAAjC,EAAiCA,cAE3BmL,EAAmBC,KAAW,CAChCxQ,YAAawQ,OAAaC,aAS9B,OACI,cAAC,KAAD,CACIF,iBAAkBA,EAClBwB,oBAAkB,EAClBxC,cAAe,CACXvP,YAAW,OAAElB,QAAF,IAAEA,OAAF,EAAEA,EAASkB,YAAawL,IAAG,OAClC1M,QADkC,IAClCA,OADkC,EAClCA,EAAS0M,KAEjBkE,SAAU,SAAA7L,GAAM,OAdxB,SAA0B/E,GACtBsG,EAActG,GAAS7B,MAAK,WACxByX,GAAY,MAYQzC,CAAiBpO,IAPzC,SAQK,gBAAG+L,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASb,EAA1B,EAA0BA,aAAcc,EAAxC,EAAwCA,MAAxC,OACG,eAACxB,GAAA,EAAD,CAAMW,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACjB,GAAD,CAAakB,YAAY,eAAe5J,KAAK,gBAC7C,cAAC2K,GAAD,CAAYmB,KAAM,EAAGlC,YAAY,eAAe5J,KAAK,QACrD,cAACqD,EAAA,EAAD,CACIuE,SAAU6B,IAAiBc,IAAUD,EACrCnQ,QAASsP,EACT5C,QAAQ,QAAQvD,UAAQ,EAACuG,KAAK,SAASrJ,QAAQ,4BChCxD8B,gBAAS,YAA2C,IAAnB5J,EAAkB,EAAlBA,QACpB6V,EAAoBnM,IAApC3B,aAAgB8N,cACxB,EAAsC1G,oBAAS,GAA/C,mBAAO2G,EAAP,KAAoBC,EAApB,KAEA,OACI,cAACC,GAAA,EAAIC,KAAL,UACI,eAAC1G,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,UACI,cAACS,EAAA,EAAD,CAAQ+B,QAAQ,OAAO9C,KAAK,QAAQvD,QAAO,gBAAW9H,EAAQkB,eAC7D2U,GACG,cAAClL,EAAA,EAAD,CAAQwD,QAAQ,QAAQpC,OAAK,EACzBjE,QAASgO,EAAc,SAAW,eAClCxK,QAAS,kBAAMyK,GAAgBD,SAI3C,cAACvG,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACI,mCACKmK,EACG,cAAC,GAAD,CAAiBF,YAAaG,IAE9B,mBAAGtL,MAAO,CAAE0J,WAAY,YAAxB,SACKnU,EAAQ0M,kBCtB1B9C,gBAAS,YAAqD,IAApB7K,EAAmB,EAAnBA,SACrD,OACI,eAACoN,GAAA,EAAD,CAAMjC,GAAIkB,IAAMhB,GAAE,sBAAiBrL,EAASF,IAA5C,UACI,cAACiM,EAAA,EAAD,CAAOP,IAAG,iCAA4BxL,EAAS6B,SAArC,QAAqD6J,MAAO,CAClEsE,UAAW,IAAKmH,UACZ,WAER,eAAC/J,GAAA,EAAKV,QAAN,WACI,cAACU,GAAA,EAAKC,OAAN,CAAa0B,UAAU,SAAvB,SAAiC/O,EAAS4B,QAC1C,eAACwL,GAAA,EAAKgK,KAAN,CAAWrI,UAAU,SAArB,UACI,8BAAMvI,kBAAO,IAAIjC,KAAKvE,EAAS+B,MAAO,YACtC,8BAAMyE,kBAAO,IAAIjC,KAAKvE,EAAS+B,MAAO,wBCdpDsV,GAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAE5Y,IAAK,WAC1C,CAAE2Y,SAAU,cAAeC,KAAM,CAAE5Y,IAAK,SACxC,CAAE2Y,SAAU,UAAWC,KAAM,CAAE5Y,IAAK,aAGzBkM,gBAAS,WACpB,IAAQ7B,EAAiB2B,IAAjB3B,aACApB,EAA0DoB,EAA1DpB,mBAAoBvG,EAAsC2H,EAAtC3H,eAAgB0F,EAAsBiC,EAAtBjC,kBAE5CwJ,qBAAU,WACN3I,MACD,CAACA,IAMJ,OACI,cAACqP,GAAA,EAAIC,KAAL,UACI,eAAC1G,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACI,cAACS,EAAA,EAAD,CACI+B,QAAQ,OACR9C,KAAK,WACLvD,QAAQ,iBAEhB,eAACyH,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,UACI,cAACqK,GAAA,EAAD,CACIO,KAAM,CAAEtI,WAAW,EAAM/C,UAAU,GACnCkL,MAAOA,GACPI,YAAa,SAACxK,EAAGvQ,GAAJ,OAjBT,SAACuQ,EAAmBvQ,GACxCkL,EAAmByP,GAAM3a,EAAKgb,aAAuBH,KAAK5Y,KAgBhBgZ,CAAgB1K,EAAGvQ,MAEjD,uBACA,cAACua,GAAA,EAAIC,KAAL,CAAUxU,QAASqE,EAAnB,SACI,cAACqG,GAAA,EAAKwB,MAAN,CAAYgJ,YAAa,EAAzB,SACKvW,EAAe8M,KAAI,SAACnO,GAAD,OAChB,cAAC,GAAD,CAAyCA,SAAUA,GAAvBA,EAASF,sBCvCtD+K,gBAAS,WACpB,IAAQ7B,EAAiB2B,IAAjB3B,aACA/H,EAAsD+H,EAAtD/H,QAAS2F,EAA6CoC,EAA7CpC,WAAYC,EAAiCmC,EAAjCnC,kBAAmBC,EAAckC,EAAdlC,UAEhD,OACI,cAACmQ,GAAA,EAAIC,KAAL,CAAUxU,QAASmE,EAAnB,SACI,eAAC2J,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACI,cAACS,EAAA,EAAD,CACI+B,QAAQ,OACR9C,KAAK,OACLvD,QAAuB,IAAdjC,EAAA,kCAAsC7F,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASkB,aAA/C,wBAAyElB,QAAzE,IAAyEA,OAAzE,EAAyEA,EAASkB,YAAlF,qBAEjB,cAACqO,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACI,cAACQ,GAAA,EAAKwB,MAAN,CAAYgJ,YAAa,EAAzB,SACKhR,EAAWuH,KAAI,SAAAlN,GAAO,OACnB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQR,yB,iBCbvC,SAASoX,GAAT,GAAkE,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,WACvD,OACI,cAAC,KAAD,CACIvM,IAAKsM,EACLpM,MAAO,CAAE+J,OAAQ,IAAK7I,MAAO,QAC7BoL,mBAAoB,EACpBC,YAAa,EACbC,QAAQ,eACRC,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIT,EAAWS,M,cCblC,SAASC,GAAT,GAAmD,IAApBC,EAAmB,EAAnBA,SACpCC,EAAW,CACbjE,OAAQ,kBACR3G,YAAa,OACb6K,aAAc,MACdC,WAAY,OACZ9J,UAAW,SACX0G,OAAQ,KAONqD,EAASC,uBAAY,SAAAC,GACvBN,EAASM,EAAc7K,KAAI,SAACxN,GAAD,OAAea,OAAOC,OAAOd,EAAM,CAC1DuX,QAASe,IAAIC,gBAAgBvY,WAElC,CAAC+X,IACJ,EAAsDS,aAAY,CAAEL,WAA5DM,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,aAErC,OACI,gDAASF,KAAT,IAAyB1N,MAAO4N,EAAY,2BAAQX,GAZvC,CACb5K,YAAa,UAWiE4K,EAA9E,UACI,qCAAWU,MACX,cAACxL,EAAA,EAAD,CAAMtF,KAAK,SAASgG,KAAK,SACzB,cAAClB,EAAA,EAAD,CAAQtE,QAAQ,wBCtBb,SAASwQ,GAAT,GAA+D,IAAlC7Y,EAAiC,EAAjCA,YAAaiG,EAAoB,EAApBA,UACrD,EAA0ByJ,mBAAc,IAAxC,mBAAOoJ,EAAP,KAAcd,EAAd,KACA,EAA8BtI,qBAA9B,mBAAOoI,EAAP,KAAgBT,EAAhB,KAcA,OANAxH,qBAAU,WACN,OAAO,WACHiJ,EAAMtW,SAAQ,SAACvC,GAAD,OAAesY,IAAIQ,gBAAgB9Y,EAAKuX,eAE3D,CAACsB,IAGA,eAAChJ,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa7D,MAAO,EAApB,UACI,cAACS,EAAA,EAAD,CAAQkC,KAAG,EAACzC,MAAM,OAAO/D,QAAQ,uBACjC,cAAC0P,GAAD,CAAqBC,SAAUA,OAEnC,cAAClI,EAAA,EAAKC,OAAN,CAAa7D,MAAO,IACpB,eAAC4D,EAAA,EAAKC,OAAN,CAAa7D,MAAO,EAApB,UACI,cAACS,EAAA,EAAD,CAAQkC,KAAG,EAACzC,MAAM,OAAO/D,QAAQ,0BAChCyQ,GAASA,EAAMhM,OAAS,GACrB,cAACqK,GAAD,CAAoBE,WAAYA,EAAYD,aAAc0B,EAAM,GAAGtB,aAG3E,cAAC1H,EAAA,EAAKC,OAAN,CAAa7D,MAAO,IACpB,eAAC4D,EAAA,EAAKC,OAAN,CAAa7D,MAAO,EAApB,UACI,cAACS,EAAA,EAAD,CAAQkC,KAAG,EAACzC,MAAM,OAAO/D,QAAQ,8BAChCyQ,GAASA,EAAMhM,OAAS,GACrB,qCACI,qBAAKyE,UAAU,cAAcvG,MAAO,CAAEsE,UAAW,IAAK0J,SAAU,YAChE,eAAC9N,EAAA,EAAOgD,MAAR,CAAcwH,OAAQ,EAAtB,UACI,cAACxK,EAAA,EAAD,CAAQlJ,QAASiE,EAAW4F,QAhCpD,WACQiM,GACAA,EAAQmB,mBAAmBC,QAAO,SAAAC,GAAI,OAAInZ,EAAYmZ,OA8BOhO,UAAQ,EAACS,KAAK,UAC3D,cAACV,EAAA,EAAD,CAAQuE,SAAUxJ,EAAW4F,QAAS,kBAAMmM,EAAS,KAAKpM,KAAK,sBCrC5EzB,oBAAS,YAA4C,IAAD,EAAlB5J,EAAkB,EAAlBA,QAC7C,EACwD0J,IADhD3B,aAAgB8N,EAAxB,EAAwBA,cAAepW,EAAvC,EAAuCA,YACnCiG,EADJ,EACIA,UAAWjE,EADf,EACeA,QAAS3B,EADxB,EACwBA,aAAcC,EADtC,EACsCA,YACtC,EAAwCoP,oBAAS,GAAjD,mBAAO0J,EAAP,KAAqBC,EAArB,KACA,EAA4B3J,mBAAS,IAArC,mBAAO4J,EAAP,KAAeC,EAAf,KAgBA,OACI,cAAChD,GAAA,EAAIC,KAAL,UACI,eAAC1G,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,UACI,cAACS,EAAA,EAAD,CAAQ+B,QAAQ,OAAO9C,KAAK,QAAQvD,QAAQ,WAC3C+N,GACG,cAAClL,EAAA,EAAD,CAAQwD,QAAQ,QAAQpC,OAAK,EACzBjE,QAAS+Q,EAAe,SAAW,YACnCvN,QAAS,kBAAMwN,GAAiBD,SAI5C,cAACtJ,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACKkN,EACG,cAACP,GAAD,CAAmB7Y,YA5BvC,SAA2BC,GACvBD,EAAYC,GAAMvB,MAAK,kBAAM2a,GAAgB,OA2BsBpT,UAAWA,IAE9D,cAACyG,GAAA,EAAKwB,MAAN,CAAYgJ,YAAa,EAAzB,mBACK3W,EAAQkG,cADb,aACK,EAAgBgH,KAAI,SAAAjH,GAAK,OACtB,eAACkG,GAAA,EAAD,WACI,cAACrB,EAAA,EAAD,CAAOP,IAAKtE,EAAMhI,MACjB4X,GACG,eAAClL,EAAA,EAAOgD,MAAR,CAAc/B,OAAK,EAACuJ,OAAQ,EAA5B,UACI,cAACxK,EAAA,EAAD,CACIoB,OAAK,EACLF,MAAM,QACN/D,QAAQ,OACRR,KAAM,OAASrB,EAAMpH,GACrBqQ,SAAUjJ,EAAME,OAChB1E,QAASsX,IAAW,OAAS9S,EAAMpH,IAAM4C,EACzC6J,QAAS,SAAAU,GAAC,OAvCtD,SAA4B/F,EAAc+F,GACtCgN,EAAUhN,EAAEiN,cAAc3R,MAC1BxH,EAAamG,GAqCyCiT,CAAmBjT,EAAO+F,MAE5C,cAACrB,EAAA,EAAD,CACIoB,OAAK,EACLF,MAAM,MACNR,KAAK,QACL5J,QAASsX,IAAW9S,EAAMpH,IAAM4C,EAChC6J,QAAS,SAAAU,GAAC,OAzCtD,SAA2B/F,EAAc+F,GACrCgN,EAAUhN,EAAEiN,cAAc3R,MAC1BvH,EAAYkG,GAuC0CkT,CAAkBlT,EAAO+F,IACvCkD,SAAUjJ,EAAME,OAChBmB,KAAMrB,EAAMpH,UApBjBoH,EAAMpH,mBCnClC+K,gBAAS,YAA6C,IAAnB5J,EAAkB,EAAlBA,QACtC+H,EAAiB2B,IAAjB3B,aAEFqO,EAAQ,CACV,CAAEC,SAAU,QAASjF,OAAQ,kBAAM,cAAC,GAAD,CAAcpR,QAASA,MAC1D,CAAEqW,SAAU,SAAUjF,OAAQ,kBAAM,cAAC,GAAD,CAAepR,QAASA,MAC5D,CAAEqW,SAAU,SAAUjF,OAAQ,kBAAM,cAAC,GAAD,MACpC,CAAEiF,SAAU,YAAajF,OAAQ,kBAAM,cAAC,GAAD,MACvC,CAAEiF,SAAU,YAAajF,OAAQ,kBAAM,cAAC,GAAD,OAG3C,OACI,cAAC4E,GAAA,EAAD,CACIO,KAAM,CAAE3K,OAAO,EAAM4C,UAAU,GAC/B4K,aAAa,QACbhD,MAAOA,EACPI,YAAa,SAACxK,EAAGvQ,GAAJ,OAAasM,EAAahC,aAAatK,EAAKgb,mB,oBCrBtD7M,gBAAS,YAA4C,IAAnB5J,EAAkB,EAAlBA,QAC7C,OACI,cAAC0N,EAAA,EAAD,UACI,eAAC6B,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACI,cAAC1B,EAAA,EAAK0D,MAAN,UACI,eAAC1D,EAAA,EAAD,WACI,cAACA,EAAA,EAAKa,MAAN,CAAYC,QAAM,EAACuC,KAAK,QAAQ/C,IAAKvK,EAAQmB,OAAS,qBACtD,cAAC8I,EAAA,EAAKwB,QAAN,CAAcoJ,cAAc,SAA5B,SACI,cAACzI,EAAA,EAAD,CAAQlC,GAAG,KAAKpC,QAAS9H,EAAQkB,uBAKjD,eAACqO,EAAA,EAAKC,OAAN,CAAa7D,MAAO,EAApB,UACI,eAAC0N,GAAA,EAAU1L,MAAX,CAAiBwH,OAAQ,EAAzB,UACI,cAACkE,GAAA,EAAD,CAAW7I,MAAM,YAAYzO,MAAO/B,EAAQqE,iBAC5C,cAACgV,GAAA,EAAD,CAAW7I,MAAM,YAAYzO,MAAO/B,EAAQyG,oBAEhD,cAAC6S,GAAA,EAAD,IACA,cAAC,GAAD,CAActZ,QAASA,eCnB5B4J,gBAAS,WACpB,IAAQpK,EAAauT,eAAbvT,SACAuI,EAAiB2B,IAAjB3B,aACAtC,EAAuDsC,EAAvDtC,eAAgBO,EAAuC+B,EAAvC/B,YAAahG,EAA0B+H,EAA1B/H,QAAS+F,EAAiBgC,EAAjBhC,aAS9C,OAPAuJ,qBAAU,WAEN,OADAtJ,EAAYxG,GACL,WACHuG,EAAa,MAElB,CAACC,EAAaxG,EAAUuG,IAEvBN,EAAuB,cAACsM,GAAD,CAAkBjK,QAAQ,uBAGjD,cAACyH,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,OAAN,CAAa7D,MAAO,GAApB,SACK3L,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,2BCtBlC,SAASuZ,GAAT,GAAiE,IAA9BC,EAA6B,EAAxCC,UAAyBC,EAAe,mBACtD5H,EAAiBpI,IAA9B7G,UAAaiP,WACrB,OACI,cAAC,KAAD,2BACQ4H,GADR,IAEItI,OAAQ,SAACnB,GAAD,OAAW6B,EAAa,cAAC0H,EAAD,eAAevJ,IAAY,cAAC,KAAD,CAAU7F,GAAG,UCgDrER,oBA1Cf,WACE,IAAM+P,EAAWC,eACjB,EAAmClQ,IAA3BhN,EAAR,EAAQA,YAAamG,EAArB,EAAqBA,UAUrB,OARAyM,qBAAU,WACJ5S,EAAYF,MACdqG,EAAUwE,UAAUwS,SAAQ,kBAAMnd,EAAY+K,kBAE9C/K,EAAY+K,iBAEb,CAAC/K,EAAamG,IAEZnG,EAAY8K,UAGf,qCACE,cAAC,IAAD,CAAgBqD,SAAS,eAAeiP,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,KAAD,CAAOzP,OAAK,EAAC0P,KAAK,IAAIN,UAAWO,KACjC,cAAC,KAAD,CACED,KAAM,QACN3I,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAACpH,EAAA,EAAD,CAAWS,MAAO,CAAEgE,UAAW,OAA/B,SACE,eAAC,KAAD,WACE,cAAC8K,GAAD,CAAclP,OAAK,EAAC0P,KAAK,cAAcN,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWS,KAChD,cAACX,GAAD,CAAiCQ,KAAM,CAAC,kBAAmB,eAAgBN,UAAWU,IAAnER,EAASjc,KAC5B,cAAC6b,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWW,KACpD,cAACb,GAAD,CAAcQ,KAAK,UAAUN,UAAWvE,KACxC,cAAC,KAAD,CAAO6E,KAAK,gBAAgBN,UAAWjE,KACvC,cAAC,KAAD,CAAOiE,UAAWnE,mBApBG,cAACvD,GAAD,CAAkBjK,QAAQ,sBCjBhDuS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpc,MAAK,YAAkD,IAA/Cqc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KACtB,IAAQC,EAAalB,eAAbkB,SAMR,OAJAxL,qBAAU,WACRpI,OAAO6T,SAAS,EAAG,KAClB,CAACD,IAEG,KCIF,IAAMvd,GAAUyd,eAEvBC,IAAS7J,OACP,cAAC5H,EAAa0R,SAAd,CAAuBnZ,MAAOtF,EAA9B,SACE,eAAC,KAAD,CAAQc,QAASA,GAAjB,UACE,cAACsd,GAAD,IACA,cAAC,GAAD,SAGJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.7ed7b95c.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pagenumber\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pagenumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>(`/activities`, activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    update: (profile: Partial<Profile>) => requests.put('/profiles', profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    userActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pagenumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.setLoadingInitial(true);\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    loadingActivities = false;\r\n    userActivities: UserActivity[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following'\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        try {\r\n            await agent.Profiles.update(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName)\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.userActivities(this.profile!.username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user)\r\n            this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user)\r\n            this.user.displayName = name;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    sepAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not Following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label attached='top' color='red' content='Canceleed' style={{ textAlign: 'center' }} />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>\r\n                                {activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' style={{ marginLeft: '5px' }} />{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import React, { Fragment } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity}></ActivityListItem>\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: '25px' }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n}","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport ActivityList from './ActivityList';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n    <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Form, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({ inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}></Loader>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOption';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput placeholder='Title' name='title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Field, FieldProps, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + ENTER for new line'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled && (\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribon color='red' content='Cancelled' />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button onClick={updateAttendance} loading={loading}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        onClick={updateAttendance} loading={loading} color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'dd MMM yyyy hh:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username && (\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + '/buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + '/buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + '/buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + '/buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + '/activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + '/activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looke everywhere and could find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default function ServerError() {\r\n    const { commonStore } = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stact trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport * as Yup from 'yup';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileFormEdit({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required()\r\n    })\r\n\r\n    function handleFormSubmit(profile: Partial<Profile>) {\r\n        updateProfile(profile).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            enableReinitialize\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => handleFormSubmit(values)}>\r\n            {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add bio here' name='bio' />\r\n                    <Button\r\n                        disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting}\r\n                        floated='right' positive type='submit' content='Update profile' />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileFormEdit from \"./ProfileFormEdit\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileAbout({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser } } = useStore();\r\n    const [editProfile, setEditProfile] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content={`About ${profile.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={editProfile ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditProfile(!editProfile)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <>\r\n                        {editProfile ? (\r\n                            <ProfileFormEdit setEditMode={setEditProfile} />\r\n                        ) : (\r\n                            <p style={{ whiteSpace: 'pre-wrap' }}>\r\n                                {profile.bio}\r\n                            </p>\r\n                        )}\r\n                    </>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Image } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\n\r\ninterface Props {\r\n    activity: UserActivity;\r\n}\r\n\r\nexport default observer(function ProfileActivitiesCard({ activity }: Props) {\r\n    return (\r\n        <Card as={Link} to={`/activities/${activity.id}`}>\r\n            <Image src={`/assets/categoryImages/${activity.category}.jpg`} style={{\r\n                minHeight: 100, objectFit:\r\n                    'cover'\r\n            }} />\r\n            <Card.Content>\r\n                <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                </Card.Meta>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { Card, Grid, Header, Tab, TabProps } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileActivitiesCard from \"./ProfileActivitiesCard\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } },\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const { loadUserActivities, userActivities, loadingActivities } = profileStore\r\n\r\n    useEffect(() => {\r\n        loadUserActivities();\r\n    }, [loadUserActivities])\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='calendar'\r\n                        content='Activities' />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        panes={panes}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Tab.Pane loading={loadingActivities}>\r\n                        <Card.Group itemsPerRow={4}>\r\n                            {userActivities.map((activity: UserActivity) => (\r\n                                <ProfileActivitiesCard key={activity.id} activity={activity} />\r\n                            ))}\r\n                        </Card.Group>\r\n                    </Tab.Pane>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane >\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps() } />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    uploading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ uploadPhoto, uploading }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={uploading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={uploading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto,\r\n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} uploading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout profile={profile} /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> }\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.sepAppLoaded());\n    } else {\n      commonStore.sepAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}