{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modal/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","currenct","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","runInAction","setActivity","setPagination","console","log","loadActivity","getActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","loadingActivities","userActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","space","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","ItemContent","ItemDescription","marginLeft","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","RegisterForm","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","disable","border","Comment","resetForm","onKeyPress","shiftKey","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","GridColumn","ActivityDetailedHeader","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyle","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4efc9181.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('activities/', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n    currenct: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null= null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n      if(activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.city = activity.city;\r\n        this.venue = activity.venue;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}\r\n\r\nexport interface Photo {\r\n    id: string,\r\n    url: string,\r\n    isMain: boolean\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value)\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            runInAction(() => {\r\n                result.data.forEach(activity => {\r\n                    this.setActivity(activity);\r\n                });\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else {\r\n            this.setLoadingInitial(true);\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                }\r\n                else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    loadingActivities = false;\r\n    userActivities: UserActivity[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.currenct();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverErrors\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt);\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }       \r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: {user, logout}} = useStore();\r\n    \r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\"/>\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\"/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar space='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n               <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Followed'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini'\r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, ItemContent, ItemDescription, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <ItemContent>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <ItemDescription>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </ItemDescription>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <ItemDescription>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </ItemDescription>\r\n                            )}\r\n                        </ItemContent>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' style={{marginLeft: '.5em'}} /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n               <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={{email: '', password: '', error: null}} \r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password.'}))}>\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}></Label>}/>\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i : any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Form, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                        <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                )}\r\n\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e,d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyTextInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required.'),\r\n        description: Yup.string().required('The activity description is required.'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required.').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        }\r\n        else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput placeholder='Title' name='title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disable={isSubmitting || dirty || isValid}\r\n                            loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Field, FieldProps, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n                <Formik\r\n                        onSubmit={(values, { resetForm }) =>\r\n                            commentStore.addComment(values).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{ position: 'relative' }}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea\r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key === 'Enter' && e.shiftKey) {\r\n                                                        return;\r\n                                                    }\r\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName\r\n                                    }</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetaledHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled} \r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid, GridColumn } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return(\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </GridColumn>\r\n            <GridColumn width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </GridColumn>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_CHAT_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const{commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n    \r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    \r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' \r\n                    content={`About ${profile?.displayName}`}\r\n                    />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Tab, Image, TabProps } from 'semantic-ui-react';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    \r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    \r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id} >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyle = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyle, ...dzActive } : dzStyle}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo)\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button \r\n                                                basic \r\n                                                color='red' \r\n                                                icon='trash' \r\n                                                loading={target === photo.id && loading} \r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <Tab.Pane><ProfileAbout /></Tab.Pane> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <Tab.Pane><ProfileActivities /></Tab.Pane> },\r\n        { menuItem: 'Followers', render: () => <Tab.Pane><ProfileFollowings /></Tab.Pane> },\r\n        { menuItem: 'Following', render: () => <Tab.Pane><ProfileFollowings /></Tab.Pane> }\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, ItemContent, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <ItemContent verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </ItemContent>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading Profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, RouteComponentProps } from \"react-router\";\r\nimport { Route, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest} : Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modal/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestErrors} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}